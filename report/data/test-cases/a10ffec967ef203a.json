{
  "uid" : "a10ffec967ef203a",
  "name" : "test_modify_user",
  "fullName" : "test_cases.test_user_management.test_modify_user.TestModifyUser#test_modify_user",
  "historyId" : "effe78ce3d1bc0e6bd194ba76e776d7b",
  "time" : {
    "start" : 1578028788925,
    "stop" : 1578028788925,
    "duration" : 0
  },
  "description" : "\n        用例描述：修改用户姓名，正常修改\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    用例描述：修改用户姓名，正常修改\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.66.8.200' ([WinError 10065] 套接字操作尝试一个无法连接的主机。)\")",
  "statusTrace" : "self = <pymysql.connections.Connection object at 0x000001D7D978E8D0>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n>                               **kwargs)\n\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py:583: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('10.66.8.200', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\socket.py:724: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('10.66.8.200', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               OSError: [WinError 10065] 套接字操作尝试一个无法连接的主机。\n\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\socket.py:713: OSError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope='class', autouse=True)\n    def database_base_configuration():\n>       delete_database_data_test_ci()\n\ntest_cases\\conftest.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nUtils\\operateDatabaseData.py:31: in delete_database_data_test_ci\n    db=db_name)\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\__init__.py:94: in Connect\n    return Connection(*args, **kwargs)\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py:325: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x000001D7D978E8D0>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG: print('connected using unix_socket')\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs['source_address'] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout,\n                                **kwargs)\n                            break\n                        except (OSError, IOError) as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG: print('connected using socket')\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                sock.settimeout(None)\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n            self._sock = sock\n            self._rfile = _makefile(sock, 'rb')\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n                self.commit()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._rfile = None\n            if sock is not None:\n                try:\n                    sock.close()\n                except:  # noqa\n                    pass\n    \n            if isinstance(e, (OSError, IOError, socket.error)):\n                exc = err.OperationalError(\n                        2003,\n                        \"Can't connect to MySQL server on %r (%s)\" % (\n                            self.host, e))\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG: print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.66.8.200' ([WinError 10065] 套接字操作尝试一个无法连接的主机。)\")\n\nc:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py:630: OperationalError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "database_base_configuration",
    "time" : {
      "start" : 1578028788925,
      "stop" : 1578028788941,
      "duration" : 16
    },
    "status" : "broken",
    "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.66.8.200' ([WinError 10065] 套接字操作尝试一个无法连接的主机。)\")\n",
    "statusTrace" : "  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\_pytest\\fixtures.py\", line 957, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\_pytest\\fixtures.py\", line 787, in call_fixture_func\n    res = fixturefunc(**kwargs)\n  File \"E:\\automatic\\ui-automatic\\test_cases\\conftest.py\", line 10, in database_base_configuration\n    delete_database_data_test_ci()\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"E:\\automatic\\ui-automatic\\Utils\\operateDatabaseData.py\", line 31, in delete_database_data_test_ci\n    db=db_name)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\__init__.py\", line 94, in Connect\n    return Connection(*args, **kwargs)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py\", line 325, in __init__\n    self.connect()\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py\", line 630, in connect\n    raise exc\n",
    "steps" : [ {
      "name" : "清空数据库",
      "time" : {
        "start" : 1578028788925,
        "stop" : 1578028788941,
        "duration" : 16
      },
      "status" : "broken",
      "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on '10.66.8.200' ([WinError 10065] 套接字操作尝试一个无法连接的主机。)\")\n",
      "statusTrace" : "  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"E:\\automatic\\ui-automatic\\Utils\\operateDatabaseData.py\", line 31, in delete_database_data_test_ci\n    db=db_name)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\__init__.py\", line 94, in Connect\n    return Connection(*args, **kwargs)\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py\", line 325, in __init__\n    self.connect()\n  File \"c:\\users\\keda\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\\pymysql\\connections.py\", line 630, in connect\n    raise exc\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 1,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "这是一个修改人员名字，账号的case"
  }, {
    "name" : "feature",
    "value" : "成员管理,修改人员"
  }, {
    "name" : "parentSuite",
    "value" : "test_cases.test_user_management"
  }, {
    "name" : "suite",
    "value" : "test_modify_user"
  }, {
    "name" : "subSuite",
    "value" : "TestModifyUser"
  }, {
    "name" : "host",
    "value" : "DESKTOP-IJ0L9OR"
  }, {
    "name" : "thread",
    "value" : "1636-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_cases.test_user_management.test_modify_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "a10ffec967ef203a.json",
  "parameterValues" : [ ]
}